name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Create secrets.properties
      run: |
        echo "TRAKT_API_KEY=${{ secrets.TRAKT_API_KEY }}" >> secrets.properties
        echo "OMDB_API_KEY=${{ secrets.OMDB_API_KEY }}" >> secrets.properties
        echo "TMDB_READ_KEY=${{ secrets.TMDB_READ_KEY }}" >> secrets.properties
        
    - name: Run unit tests
      run: ./gradlew test
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: app/build/reports/tests/

  build:
    needs: test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Create secrets.properties
      run: |
        echo "TRAKT_API_KEY=${{ secrets.TRAKT_API_KEY }}" >> secrets.properties
        echo "OMDB_API_KEY=${{ secrets.OMDB_API_KEY }}" >> secrets.properties
        echo "TMDB_READ_KEY=${{ secrets.TMDB_READ_KEY }}" >> secrets.properties
        
    - name: Extract version info
      id: version
      run: |
        VERSION_NAME=$(cat version.txt)
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        echo "VERSION_NAME=${VERSION_NAME}" >> $GITHUB_OUTPUT
        echo "TAG_VERSION=${TAG_VERSION}" >> $GITHUB_OUTPUT
        echo "BUILD_NUMBER=${GITHUB_RUN_NUMBER}" >> $GITHUB_OUTPUT
        
    - name: Build optimized release APKs
      run: |
        ./gradlew assembleRelease --parallel --configure-on-demand
        ls -la app/build/outputs/apk/release/
        
    - name: Analyze APK size
      run: |
        find app/build/outputs/apk/release/ -name "*.apk" -exec ls -lh {} \;
        
    - name: Upload ARM64 APK (Primary)
      uses: actions/upload-artifact@v4
      with:
        name: strmr-v${{ steps.version.outputs.VERSION_NAME }}-arm64.apk
        path: app/build/outputs/apk/release/app-arm64-v8a-release.apk
        
    - name: Upload ARM32 APK (Legacy)
      uses: actions/upload-artifact@v4
      with:
        name: strmr-v${{ steps.version.outputs.VERSION_NAME }}-arm32.apk  
        path: app/build/outputs/apk/release/app-armeabi-v7a-release.apk

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Extract version info
      id: version
      run: |
        VERSION_NAME=$(cat version.txt)
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        echo "VERSION_NAME=${VERSION_NAME}" >> $GITHUB_OUTPUT
        echo "TAG_VERSION=${TAG_VERSION}" >> $GITHUB_OUTPUT
        
    - name: Download release APK
      uses: actions/download-artifact@v4
      with:
        name: strmr-v${{ steps.version.outputs.VERSION_NAME }}.apk
        path: ./
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Strmr ${{ github.ref_name }}
        draft: false
        prerelease: false
        body: |
          ## Release Notes
          
          **Version:** ${{ steps.version.outputs.VERSION_NAME }}
          **Tag:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          
          ### Installation
          Download the APK file below and sideload it to your Android TV device.
          
          ### Requirements
          - Android TV with API level 30+ (Android 11+)
          - Allow installation from unknown sources
          
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./app-release.apk
        asset_name: strmr-${{ github.ref_name }}.apk
        asset_content_type: application/vnd.android.package-archive